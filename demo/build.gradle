apply plugin: 'com.android.application'
// jacoco android application
apply from: rootProject.file("gradle/jacoco/jacoco-android-application.gradle")
//apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion cfg_android["compileSdkVersion"]
//    buildToolsVersion cfg_android["buildToolsVersion"]

    defaultConfig {
        applicationId "com.sinlov.android.plugin.demo"
        // Specifies the application ID for the test APK.
//        testApplicationId "com.sinlov.android.plugin.demo.test"
        minSdkVersion cfg_android["minSdkVersion"]
        targetSdkVersion cfg_android["targetSdkVersion"]
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
//        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // Android Studio 3.6
//    viewBinding {
//        enabled = true
//    }
//    dataBinding{
//        enabled = true
//    }
    // Android Studio 4.0
//    buildFeatures {
//        viewBinding = true
//        dataBinding = true
//    }

    lintOptions {
//        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
        checkReleaseBuilds false
        // for androidx close warning
        disable 'GoogleAppIndexingWarning'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        encoding "UTF-8"
    }

    signingConfigs {
        keyBuild {
            storeFile file(project.hasProperty('KEY_BUILD_STOREFILE') ? KEY_1_STOREFILE : '../keystore/debug.keystore')
            storePassword project.hasProperty('KEY_BUILD_STOREPASS') ? KEY_1_STOREPASS : 'android'
            keyAlias project.hasProperty('KEY_BUILD_KEYALIAS') ? KEY_1_KEYALIAS : 'android'
            keyPassword project.hasProperty('KEY_BUILD_KEYPASS') ? KEY_1_KEYPASS : 'android'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            // https://developer.android.com/studio/test
            all {
                // Sets JVM argument(s) for the test JVM(s).
                jvmArgs '-XX:MaxPermSize=256m'
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.keyBuild
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.keyBuild
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // test start
    // Junit
    testImplementation test_depends["junit:junit"],
            // Mockito
            test_depends["org.mockito:mockito-core"],
            // Robolectric
            test_depends["org.robolectric:robolectric"],
            test_depends["androidx.test:core"],
            // deprecated
//            test_depends.robolectric_shadows_support_v4,
            // EasyMock
            test_depends["org.easymock:easymock"],
            // PowerMock
            test_depends["org.powermock:powermock-core"],
            test_depends["org.powermock:powermock-module-junit4"],
            // PowerMock + EasyMock extension
            test_depends["org.powermock:powermock-api-easymock"]

    androidTestImplementation android_test_depends["androidx.test.ext:junit"],
            android_test_depends["androidx.test.espresso:espresso-core"]

    //    androidTestImplementation android_test_depends.robotium_solo
    // test end

    // logcat window https://github.com/getActivity/Logcat
    debugImplementation depends_debug["com.hjq:logcat"]

    // butter knife only for module test!
//    implementation depends.butterknife
//    annotationProcessor apt_compiler.butterknife_compiler

    // implementation base
    implementation depends_android_x["androidx.annotation:annotation"],
//            depends_android_x["androidx.legacy:legacy-support-v4"],
            depends_android_x["androidx.recyclerview:recyclerview"],
//            depends_android_x["androidx.cardview:cardview"],
//            depends_android_x["com.google.android.material:material"],
            depends_android_x["androidx.appcompat:appcompat"]

    // glide
//    annotationProcessor depends_annotation["com.github.bumptech.glide:compiler"]
//    implementation depends["com.github.bumptech.glide:glide"]

    // implementation biz
    implementation depends["com.jakewharton.timber:timber"]
    implementation depends["com.hjq:xxpermissions"]
    implementation depends["com.hjq:toast"]
// https://github.com/EastWoodYang/AutoQuickAdapter
    implementation depends["com.eastwood.common:auto-quick-adapter"]

    if (isReleaseBuild()) {
        //todo release depends
//        implementation ''
    } else {
        // todo load local module
//     implementation project(':plugin')
    }

}

