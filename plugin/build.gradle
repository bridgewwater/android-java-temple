apply plugin: 'com.android.library'
// uploadArchives
apply from: rootProject.file("gradle/nexusUpload.gradle")

android {
    compileSdkVersion ANDROID_COMPILE_SDK_VERSION as int

    defaultConfig {
        minSdkVersion ANDROID_MIN_SDK_VERSION as int
        targetSdkVersion ANDROID_TARGET_SDK_VERSION as int
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
//        multiDexEnabled true
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    // compile fileTree(dir: 'libs', include: ['*.jar'])
    // test start
    // Junit
    testCompile test_depends.junit,
            // Mockito
            test_depends.mockito_core,
            // Robolectric + Support v4
            test_depends.robolectric,
            test_depends.robolectric_shadows_support_v4,
            // EasyMock
            test_depends.easymock,
            // PowerMock
            test_depends.powermock_core,
            test_depends.powermock_module_junit4,
            // PowerMock + EasyMock extension
            test_depends.powermock_api_easymock

    //    androidTestCompile android_test_depends.robotium_solo
    // test end
    compileOnly depends.com_android_support_support_annotations
//    compile depends.com_android_support_support_v4,
//            depends.com_android_support_appcompat_7
//            depends.com_android_support_recyclerview_v7,
//            depends.com_android_support_cardview_v7,
//            depends.com_android_support_design
    // you can use compileOnly for only compile
//    compileOnly depends.gson
    if (isReleaseBuild()) {
        //todo release depends
    } else {
        //todo snapshot depends
    }
}

