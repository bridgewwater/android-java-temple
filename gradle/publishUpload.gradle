/**
 * You can use checkNexusModuleConfig at module project for check
 *
 * <pre>
 *     task clean(type: Delete) {*          checkNexusModuleConfig()
 *          delete project.buildDir
 *}* </pre>
 * https://docs.gradle.org/6.5/userguide/upgrading_version_5.html#legacy_publication_system_is_deprecated_and_replaced_with_the_publish_plugins
 * Gradle 4.8 use maven-publish
 *
 */

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

def checkNexusModuleConfig() {
    String versionName = getVersionName()
    int versionCode = getVersionCode()
    String groupSet = getGroupSet()
    String pomArtifactId = getPomArtifactId()
    String pomName = getPomName()
    String repositoryUsername = getRepositoryUsername()
    String repositoryPassword = getRepositoryPassword()
    String releaseRepositoryUrl = getReleaseRepositoryUrl()
    String snapshotRepositoryUrl = getSnapshotRepositoryUrl()
    String pomPackaging = getPomPackaging()
    String pomDeveloperId = getPomDeveloperId()
    String pomDeveloperName = getPomDeveloperName()
    String pomLicenceName = getPomLicenceName()
    String pomLicenceUrl = getPomLicenceUrl()
    String pomLicenceDist = getPomLicenceDist()
    String pomDescription = getPomDescription()
    if (
    isStringEmpty(versionName) || versionCode == 0 || isStringEmpty(groupSet) ||
            isStringEmpty(pomArtifactId) || isStringEmpty(pomName) ||
            isStringEmpty(repositoryUsername) || isStringEmpty(repositoryPassword)
    ) {
        throw new IllegalArgumentException("checkNexusModuleConfig error, please check log!")
    } else {
        def sb = new StringBuffer()
        sb.append("checkNexusModuleConfig at module [ ")
        sb.append(project.name)
        sb.append(" ] success!")
        sb.append("\n\t versionName: ")
        sb.append(versionName)
        sb.append("\n\t versionCode: ")
        sb.append(versionCode)
        sb.append("\n\t group: ")
        sb.append(groupSet)
        sb.append("\n\t pomArtifactId: ")
        sb.append(pomArtifactId)
        sb.append("\n\t pomName: ")
        sb.append(pomName)
        sb.append("\n\t nexus_username: ")
        sb.append(repositoryUsername)
        if (isReleaseBuild()) {
            sb.append("\n\t buildType: release")
            sb.append("\n\t releaseRepositoryUrl: ")
            sb.append(releaseRepositoryUrl)
        } else {
            sb.append("\n\t buildType: SNAPSHOT")
            sb.append("\n\t snapshotRepositoryUrl: ")
            sb.append(snapshotRepositoryUrl)
        }
        sb.append("\n\t pomPackaging: ")
        sb.append(pomPackaging)
        sb.append("\n\t pomDeveloperId: ")
        sb.append(pomDeveloperId)
        sb.append("\n\t pomDeveloperName: ")
        sb.append(pomDeveloperName)
        sb.append("\n\t pomLicenceName: ")
        sb.append(pomLicenceName)
        sb.append("\n\t pomLicenceUrl: ")
        sb.append(pomLicenceUrl)
        sb.append("\n\t pomLicenceDist: ")
        sb.append(pomLicenceDist)
        sb.append("\n\t pomDescription: ")
        sb.append(pomDescription)
        sb.append("\n")
        print sb.toString()
    }
}

def printErrorGradlePropertiesNotSet(tag) {
    System.err.println String.format('Stop build by error, you are not set [ %s ] at gradle.properties, please set and retry!', tag)
}

boolean isStringEmpty(str) {
    if (str == null) {
        return true
    } else {
        if (str instanceof String) {
            return str.equals("")
        } else {
            print String.format("warning this object %s, is not String!", str)
            return true
        }
    }
}

boolean isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

String getVersionName() {
    if (hasProperty('VERSION_NAME')) {
        return VERSION_NAME
    } else {
        printErrorGradlePropertiesNotSet('VERSION_NAME')
        return ""
    }
}

int getVersionCode() {
    if (hasProperty('VERSION_CODE')) {
        return VERSION_CODE as int
    } else {
        printErrorGradlePropertiesNotSet('VERSION_CODE')
        return 0
    }
}

String getGroupSet() {
    if (hasProperty('GROUP')) {
        return GROUP
    } else {
        printErrorGradlePropertiesNotSet('GROUP')
        return ""
    }
}

String getPomArtifactId() {
    if (hasProperty('POM_ARTIFACT_ID')) {
        return POM_ARTIFACT_ID
    } else {
        printErrorGradlePropertiesNotSet('POM_ARTIFACT_ID')
        return ""
    }
}

String getPomName() {
    if (hasProperty('POM_NAME')) {
        return POM_NAME
    } else {
        printErrorGradlePropertiesNotSet('POM_NAME')
        return ""
    }
}

String getPomPackaging() {
    return hasProperty('POM_PACKAGING') ? POM_PACKAGING : "aar"
}

String getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "file://${project.rootDir}/mvn-repo/release"
}

String getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "file://${project.rootDir}/mvn-repo/snapshots/"
}

String getRepositoryUsername() {
    if (hasProperty('NEXUS_USERNAME')) {
        return NEXUS_USERNAME
    } else {
        printErrorGradlePropertiesNotSet('NEXUS_USERNAME')
        return ""
    }
}

String getRepositoryPassword() {
    if (hasProperty('NEXUS_PASSWORD')) {
        return NEXUS_PASSWORD
    } else {
        printErrorGradlePropertiesNotSet('NEXUS_PASSWORD')
        return ""
    }
}

String getPomDeveloperId() {
    return hasProperty('POM_DEVELOPER_ID') ? POM_DEVELOPER_ID : "default_pom_develop_id"
}

String getPomDeveloperName() {
    return hasProperty('POM_DEVELOPER_NAME') ? POM_DEVELOPER_NAME : "default_pom_develop_name"
}

String getPomLicenceName() {
    return hasProperty('POM_LICENCE_NAME') ? POM_LICENCE_NAME : "default_pom_licence_name"
}

String getPomLicenceUrl() {
    return hasProperty('POM_LICENCE_URL') ? POM_LICENCE_URL : "default_pom_licence_url"
}

String getPomLicenceDist() {
    return hasProperty('POM_LICENCE_DIST') ? POM_LICENCE_DIST : "default_pom_licence_dist"
}

String getPomDescription() {
    return hasProperty('POM_DESCRIPTION') ? POM_DESCRIPTION : "default_pom_description"
}

java {
    withJavadocJar()
    withSourcesJar()
}

group = this.getGroupSet()
version = this.getVersionName()

publishing {
    publications {
        maven(MavenPublication) {
            groupId = this.getGroupSet()
            artifactId = this.getPomArtifactId()
            version = this.getVersionName()

            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = this.getPomName()
                description = this.getPomDescription()
                developers {
                    developer {
                        id this.getPomDeveloperId()
                        name this.getPomDeveloperName()
//                        email = ''
                    }
                }

                licenses {
                    license {
                        name this.getPomLicenceName()
                        url this.getPomLicenceUrl()
//                        distribution this.getPomLicenceDist()
                    }
                }
//                scm {
//                    connection = 'scm:git:git://example.com/my-library.git'
//                    developerConnection = 'scm:git:ssh://example.com/my-library.git'
//                    url = 'http://example.com/my-library/'
//                }
            }
        }
    }
    repositories {
        maven {
            url = this.getVersionName().endsWith('SNAPSHOT') ? this.getSnapshotRepositoryUrl() : this.getReleaseRepositoryUrl()
            credentials {
                username = this.getRepositoryUsername()
                password = this.getRepositoryPassword()
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

ext {
    checkNexusModuleConfig = this.&checkNexusModuleConfig
//    getPomArtifactId = this.&getPomArtifactId
//    getPomName = this.&getPomName
//    getPomPackaging = this.&getPomPackaging
//    getReleaseRepositoryUrl = this.&getReleaseRepositoryUrl
//    getSnapshotRepositoryUrl = this.&getSnapshotRepositoryUrl
//    getRepositoryUsername = this.&getRepositoryUsername
//    getRepositoryPassword = this.&getRepositoryPassword
//    getPomDeveloperId = this.&getPomDeveloperId
//    getPomDeveloperName = this.&getPomDeveloperName
//    getPomLicenceName = this.&getPomLicenceName
//    getPomLicenceUrl = this.&getPomLicenceUrl
//    getPomLicenceDist = this.&getPomLicenceDist
//    getPomDescription = this.&getPomDescription
}